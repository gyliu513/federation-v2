/*
Copyright 2018 The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/kubernetes-sigs/federation-v2/pkg/apis/core/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// FederatedQueryLister helps list FederatedQueries.
type FederatedQueryLister interface {
	// List lists all FederatedQueries in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.FederatedQuery, err error)
	// FederatedQueries returns an object that can list and get FederatedQueries.
	FederatedQueries(namespace string) FederatedQueryNamespaceLister
	FederatedQueryListerExpansion
}

// federatedQueryLister implements the FederatedQueryLister interface.
type federatedQueryLister struct {
	indexer cache.Indexer
}

// NewFederatedQueryLister returns a new FederatedQueryLister.
func NewFederatedQueryLister(indexer cache.Indexer) FederatedQueryLister {
	return &federatedQueryLister{indexer: indexer}
}

// List lists all FederatedQueries in the indexer.
func (s *federatedQueryLister) List(selector labels.Selector) (ret []*v1alpha1.FederatedQuery, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.FederatedQuery))
	})
	return ret, err
}

// FederatedQueries returns an object that can list and get FederatedQueries.
func (s *federatedQueryLister) FederatedQueries(namespace string) FederatedQueryNamespaceLister {
	return federatedQueryNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// FederatedQueryNamespaceLister helps list and get FederatedQueries.
type FederatedQueryNamespaceLister interface {
	// List lists all FederatedQueries in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.FederatedQuery, err error)
	// Get retrieves the FederatedQuery from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.FederatedQuery, error)
	FederatedQueryNamespaceListerExpansion
}

// federatedQueryNamespaceLister implements the FederatedQueryNamespaceLister
// interface.
type federatedQueryNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all FederatedQueries in the indexer for a given namespace.
func (s federatedQueryNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.FederatedQuery, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.FederatedQuery))
	})
	return ret, err
}

// Get retrieves the FederatedQuery from the indexer for a given namespace and name.
func (s federatedQueryNamespaceLister) Get(name string) (*v1alpha1.FederatedQuery, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("federatedquery"), name)
	}
	return obj.(*v1alpha1.FederatedQuery), nil
}
